/**
 * HTI Bot API
 * Interact with the HTI Bot Backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseErrorModel from '../model/BaseErrorModel';
import BaseSuccessModel from '../model/BaseSuccessModel';
import GetAnswer200Response from '../model/GetAnswer200Response';
import HasOpenConversation200Response from '../model/HasOpenConversation200Response';
import LanguageEnum from '../model/LanguageEnum';
import RateConversation200Response from '../model/RateConversation200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the continueConversation operation.
     * @callback module:api/DefaultApi~continueConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseSuccessModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests further conversation in the ongoing conversation
     * Requests further conversation in the ongoing conversation enabling to follow-up on messages.
     * @param {String} userId The user id as determined by the caller
     * @param {module:api/DefaultApi~continueConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseSuccessModel}
     */
    continueConversation(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling continueConversation");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseSuccessModel;
      return this.apiClient.callApi(
        '/htibot/continueConversation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnswer operation.
     * @callback module:api/DefaultApi~getAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnswer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an answer to a user prompt.
     * Retrieves relevant internal documentation and generates an answer using a Large Language Model.
     * @param {String} prompt The prompt of the user
     * @param {String} userId The user id as determined by the caller
     * @param {module:model/LanguageEnum} language The language for the operation.
     * @param {module:api/DefaultApi~getAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnswer200Response}
     */
    getAnswer(prompt, userId, language, callback) {
      let postBody = null;
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling getAnswer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAnswer");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
        'prompt': prompt,
        'userId': userId,
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnswer200Response;
      return this.apiClient.callApi(
        '/htibot/getAnswer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hasOpenConversation operation.
     * @callback module:api/DefaultApi~hasOpenConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HasOpenConversation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether user currently has any open conversation with the Bot Backend.
     * A user that has not closed his conversation yet and that has not requested to continue the current conversation has an open conversation.
     * @param {String} userId The user id as determined by the caller
     * @param {module:api/DefaultApi~hasOpenConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HasOpenConversation200Response}
     */
    hasOpenConversation(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling hasOpenConversation");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HasOpenConversation200Response;
      return this.apiClient.callApi(
        '/htibot/hasOpenConversation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rateConversation operation.
     * @callback module:api/DefaultApi~rateConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RateConversation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rates the currently open conversation as positive or negative.
     * Rates the currently open conversation as positive or negative.
     * @param {String} userId The user id as determined by the caller
     * @param {Boolean} rating The rating of the conversation
     * @param {module:api/DefaultApi~rateConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RateConversation200Response}
     */
    rateConversation(userId, rating, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling rateConversation");
      }
      // verify the required parameter 'rating' is set
      if (rating === undefined || rating === null) {
        throw new Error("Missing the required parameter 'rating' when calling rateConversation");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'rating': rating
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RateConversation200Response;
      return this.apiClient.callApi(
        '/htibot/rateConversation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKnowledgeDB operation.
     * @callback module:api/DefaultApi~updateKnowledgeDBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseSuccessModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the vector database with the uploaded zipfile.
     * Updates the vector database with the uploaded zipfile. Zipfile consists of FAQ in html format and enclosed resources folder with pictures. CleanUp=True will result in the old entries being wiped from the database after succesful upload.
     * @param {File} zipFile The FAQ Zip File with HTML FAQs and enclosed resources folder
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cleanUp = false)] Whether to delete old entries after succesful upload of new entries.
     * @param {module:api/DefaultApi~updateKnowledgeDBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseSuccessModel}
     */
    updateKnowledgeDB(zipFile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zipFile' is set
      if (zipFile === undefined || zipFile === null) {
        throw new Error("Missing the required parameter 'zipFile' when calling updateKnowledgeDB");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'zipFile': zipFile,
        'cleanUp': opts['cleanUp']
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BaseSuccessModel;
      return this.apiClient.callApi(
        '/htibot/updateKnowledgeDB', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
